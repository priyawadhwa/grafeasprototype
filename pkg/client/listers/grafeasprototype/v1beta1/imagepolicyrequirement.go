/*
Copyright 2018 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/priyawadhwa/grafeasprototype/pkg/apis/grafeasprototype/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ImagePolicyRequirementLister helps list ImagePolicyRequirements.
type ImagePolicyRequirementLister interface {
	// List lists all ImagePolicyRequirements in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.ImagePolicyRequirement, err error)
	// ImagePolicyRequirements returns an object that can list and get ImagePolicyRequirements.
	ImagePolicyRequirements(namespace string) ImagePolicyRequirementNamespaceLister
	ImagePolicyRequirementListerExpansion
}

// imagePolicyRequirementLister implements the ImagePolicyRequirementLister interface.
type imagePolicyRequirementLister struct {
	indexer cache.Indexer
}

// NewImagePolicyRequirementLister returns a new ImagePolicyRequirementLister.
func NewImagePolicyRequirementLister(indexer cache.Indexer) ImagePolicyRequirementLister {
	return &imagePolicyRequirementLister{indexer: indexer}
}

// List lists all ImagePolicyRequirements in the indexer.
func (s *imagePolicyRequirementLister) List(selector labels.Selector) (ret []*v1beta1.ImagePolicyRequirement, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ImagePolicyRequirement))
	})
	return ret, err
}

// ImagePolicyRequirements returns an object that can list and get ImagePolicyRequirements.
func (s *imagePolicyRequirementLister) ImagePolicyRequirements(namespace string) ImagePolicyRequirementNamespaceLister {
	return imagePolicyRequirementNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ImagePolicyRequirementNamespaceLister helps list and get ImagePolicyRequirements.
type ImagePolicyRequirementNamespaceLister interface {
	// List lists all ImagePolicyRequirements in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.ImagePolicyRequirement, err error)
	// Get retrieves the ImagePolicyRequirement from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.ImagePolicyRequirement, error)
	ImagePolicyRequirementNamespaceListerExpansion
}

// imagePolicyRequirementNamespaceLister implements the ImagePolicyRequirementNamespaceLister
// interface.
type imagePolicyRequirementNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ImagePolicyRequirements in the indexer for a given namespace.
func (s imagePolicyRequirementNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ImagePolicyRequirement, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ImagePolicyRequirement))
	})
	return ret, err
}

// Get retrieves the ImagePolicyRequirement from the indexer for a given namespace and name.
func (s imagePolicyRequirementNamespaceLister) Get(name string) (*v1beta1.ImagePolicyRequirement, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("imagepolicyrequirement"), name)
	}
	return obj.(*v1beta1.ImagePolicyRequirement), nil
}
